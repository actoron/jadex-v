# Test cases for expression parsing and evaluation
# The tests have the following syntax
# (for non-constant and constant expressions,
# as well as parse-time and evaluation-time exceptions):
# <expression>	= <value>: <type>
# <expression>	= <value>:c <type>
# <expression>	= :p <exception>
# <expression>	= :e <exception>
#
# The <value> or <exception> is matched against the created object
# or thrown exception converted to string using startsWith().
#
# When the expression has a static type, this is matched against the
# specified type, otherwise the type of the created object is matched.
#
# Note that inside the expression ' ' (spaces), '=' and ':'
# have to be escaped using '\'. Also '#' and '!' are interpreted
# as start of comments when used as first character.

imports	= jadex.commons.*, jadex.commons.collection.*, java.awt.*, java.text.DateFormat, java.util.*
#context	= new Hashtable(){"property1"="value1", "property2"="value2"}
parameters	= $param, $val, $rect, $beliefset, $eword, $eng_ger_wordtable, $_true, $_false, $filter, $null, $res[-1]
$param	= "parameter"
$val	= "42"
$rect	= new Rectangle(1, 2, 3, 4)
$beliefset	= new String[]{"fact1", "fact3", "fact2"}
$eword	= "dog"
$res[-1] = "result"
$null = null
$eng_ger_wordtable	= new Tuple[] \
{ \
	new Tuple("coffee", "Kaffee"), \
	new Tuple("milk", "Milch"), \
	new Tuple("cow", "Kuh"), \
	new Tuple("cat", "Katze"), \
	new Tuple("dog", "Hund") \
}
$_true	= true
$_false	= false
$filter	= IFilter.ALWAYS


#-------- literals --------
1.23	= 1.23:c java.lang.Double
10	= 10:c java.lang.Integer
0xdeadf00dL	= 3735941133:c java.lang.Long
0xcafebabel	= 3405691582:c java.lang.Long
0xcafe	= 51966:c java.lang.Integer
01234	= 668:c java.lang.Integer
1L	= 1:c java.lang.Long
1.2f	= 1.2:c java.lang.Float
1.3D	= 1.3:c java.lang.Double
1E3		= 1000:c java.lang.Double
1E-3		= 0.001:c java.lang.Double
1E3F		= 1000:c java.lang.Float
1E-3f		= 0.001:c java.lang.Float
0.1E3		= 100:c java.lang.Double
0.1E-3		= 1.0E-4:c java.lang.Double
0.1E3F		= 100:c java.lang.Float
0.1E-3f		= 1.0E-4:c java.lang.Float
.1E3		= 100:c java.lang.Double
.1E-3		= 1.0E-4:c java.lang.Double
.1E3F		= 100:c java.lang.Float
.1E-3f		= 1.0E-4:c java.lang.Float
"10"	= 10:c java.lang.String
'x'	= x:c java.lang.Character
true	= true:c java.lang.Boolean
false	= false:c java.lang.Boolean
null	= null:c null
"abc\\\\rst"	= abc\\rst:c java.lang.String
"\\b"	= \u0008:c java.lang.String
"\\t"	= \t:c java.lang.String
"\\n"	= \n:c java.lang.String
"\\f"	= \f:c java.lang.String
"\\r"	= \r:c java.lang.String
"\\\\"	= \\:c java.lang.String 
'\\b'	= \u0008:c java.lang.Character
'\\t'	= \t:c java.lang.Character
'\\n'	= \n:c java.lang.Character
'\\f'	= \f:c java.lang.Character
'\\r'	= \r:c java.lang.Character
'\\\\'	= \\:c java.lang.Character 
'abc'	= :p jadex.parser.ParserException
1.2.3	= :p jadex.parser.ParserException
flase	= :p java.lang.RuntimeException

#-------- intermediate results --------
""+$res[-1]	= result: java.lang.String
$beliefset[Math.min(1,\ 2)]	= fact3: java.lang.String

#-------- math expressions --------
10\ +10	= 20:c java.lang.Integer
10\ %\ 10	= 0:c java.lang.Integer
10\ -\ 10	= 0:c java.lang.Integer
10\ *\ 10	= 100:c java.lang.Integer
10-2-1	= 7:c java.lang.Integer
1.0+2	= 3.0:c java.lang.Double
1.2*3.4	= 4.08:c java.lang.Double
17+4.0	= 21.0:c java.lang.Double
1+2+3+4+5+6+7+8+9+0	= 45:c java.lang.Integer
1+2-3+4-5+6-7+8-9+0	= -3:c java.lang.Integer
1+2-3+4-(5+6-(7+8)-9)+0	= 17:c java.lang.Integer
1.+2.-3.+4.-(5.+6.-(7.+8.)-9.)+0.	= 17.0:c java.lang.Double
-13	= -13:c java.lang.Integer
~1	= -2:c java.lang.Integer
~-13	= 12:c java.lang.Integer
-(-21.0)	= 21.0:c java.lang.Double
+(-21.0)	= -21.0:c java.lang.Double
1&1	= 1:c java.lang.Integer
1|2	= 3:c java.lang.Integer
1^3	= 2:c java.lang.Integer
1<<2	= 4:c java.lang.Integer
15>>1>>1	= 3:c java.lang.Integer
15>>(2>>1)	= 7:c java.lang.Integer
15>>4	= 0:c java.lang.Integer
null+4	= 4:c java.lang.Integer
# ???
-15>>2	= -4:c java.lang.Integer
-123456>>>15	= 131068:c java.lang.Integer
'a'+'b'	= 195:c java.lang.Integer
1/0	= :p java.lang.ArithmeticException
"test"+"test"	= testtest:c java.lang.String
"test"+(1\=\=2)	= testfalse:c java.lang.String
"test"+null	= testnull:c java.lang.String
"test"+4+5	= test45:c java.lang.String
"names\:"+SUtil.arrayToString($event.goal.getParameterSetValues("names"))+"."	?:e java.lang.RuntimeException

#-------- compare expressions --------
42>42	= false:c java.lang.Boolean
42>96	= false:c java.lang.Boolean
96>42	= true:c java.lang.Boolean
42<96	= true:c java.lang.Boolean
96<\=42	= false:c java.lang.Boolean
42<\=42	= true:c java.lang.Boolean
96>\=42	= true:c java.lang.Boolean
96>\=96	= true:c java.lang.Boolean
"term"\=\="term"	= true:c java.lang.Boolean
"term"\=\="otherterm"	= false:c java.lang.Boolean
"term"!\="otherterm"	= true:c java.lang.Boolean
"term">"otherterm"	= true:c java.lang.Boolean
1>2\=\=false	= true:c java.lang.Boolean
false\=\=1>2	= true:c java.lang.Boolean
1\ instanceof\ int	= true:c  java.lang.Boolean
1\ instanceof\ Integer	= true:c  java.lang.Boolean
1\ instanceof\ Long	= true:c  java.lang.Boolean
1\ instanceof\ long	= true:c  java.lang.Boolean
1\ instanceof\ Short	= false:c  java.lang.Boolean
1\ instanceof\ short	= false:c  java.lang.Boolean
1.0\ instanceof\ Double	= true:c  java.lang.Boolean
1.0\ instanceof\ double	= true:c  java.lang.Boolean
1.0\ instanceof\ Float	= false:c  java.lang.Boolean
1.0\ instanceof\ float	= false:c  java.lang.Boolean
"test"\ instanceof\ String	= true:c  java.lang.Boolean
"test"\ instanceof\ Tuple	= false:c  java.lang.Boolean
0.1<0.2	= true:c java.lang.Boolean
new\ Date(0).getTime()\=\=0	= true: java.lang.Boolean

#-------- compare and math expressions --------
1+2>3*4	= false:c java.lang.Boolean
20%10\=\=0	= true:c java.lang.Boolean

#-------- boolean expression --------
false||false	= false:c java.lang.Boolean
true||false	= true:c java.lang.Boolean
false||true	= true:c java.lang.Boolean
true||true	= true:c java.lang.Boolean

false&&false	= false:c java.lang.Boolean
true&&false	= false:c java.lang.Boolean
false&&true	= false:c java.lang.Boolean
true&&true	= true:c java.lang.Boolean

false|false	= false:c java.lang.Boolean
true|false	= true:c java.lang.Boolean
false|true	= true:c java.lang.Boolean
true|true	= true:c java.lang.Boolean

false&false	= false:c java.lang.Boolean
true&false	= false:c java.lang.Boolean
false&true	= false:c java.lang.Boolean
true&true	= true:c java.lang.Boolean

false^false	= false:c java.lang.Boolean
true^false	= true:c java.lang.Boolean
false^true	= true:c java.lang.Boolean
true^true	= false:c java.lang.Boolean

false||false||false	= false:c java.lang.Boolean
false||false||true	= true:c java.lang.Boolean
false||true||false	= true:c java.lang.Boolean
false||true||true	= true:c java.lang.Boolean
true||false||false	= true:c java.lang.Boolean
true||false||true	= true:c java.lang.Boolean
true||true||false	= true:c java.lang.Boolean
true||true||true	= true:c java.lang.Boolean

$_false||$_false||$_false	= false: java.lang.Boolean
$_false||$_false||$_true	= true: java.lang.Boolean
$_false||$_true||$_false	= true: java.lang.Boolean
$_false||$_true||$_true	= true: java.lang.Boolean
$_true||$_false||$_false	= true: java.lang.Boolean
$_true||$_false||$_true	= true: java.lang.Boolean
$_true||$_true||$_false	= true: java.lang.Boolean
$_true||$_true||$_true	= true: java.lang.Boolean

false|false|true	= true:c java.lang.Boolean
true&&true&&false	= false:c java.lang.Boolean
true&true&false	= false:c java.lang.Boolean
true^true^false	= false:c java.lang.Boolean
\!false	= true:c java.lang.Boolean
\!true	= false:c java.lang.Boolean
\!false||true	= true:c java.lang.Boolean
\!(false||true)	= false:c java.lang.Boolean
(true&&(((false)||(true))||(false)))	= true:c java.lang.Boolean
(true&&((true)||(false)||(false)))		= true:c java.lang.Boolean
(true\ &&\ ((false)\ ||\ (true)\ ||\ (false)))	= true:c java.lang.Boolean
#-------- compare and boolean expressions --------
("term"\=\="term")&&(96>42)	= true:c java.lang.Boolean
("term"\=\="term")&&(96<\=42)	= false:c java.lang.Boolean
(96>42)||!(96<\=42)	= true:c java.lang.Boolean
((96>42)||(96<\=42))&&("term"\=\="term")	= true:c java.lang.Boolean

#-------- conditional expressions --------
true?true\:false	= true:c java.lang.Boolean
("term"\=\="term")?false\:true	= false:c java.lang.Boolean
(96>42)?96\:42	= 96:c java.lang.Integer
$null\=\=null?"huhu"\:"hoho"	= huhu:c java.lang.String
"term"\=\="term"?"huhu"\:"hoho"	= huhu:c java.lang.String
"term"\=\="term"?false\:true	= false:c java.lang.Boolean
96>42?96\:42	= 96:c java.lang.Integer
96>42?(96)\:42	= 96:c java.lang.Integer

#-------- test constructors --------
new\ Boolean("true")	= true: java.lang.Boolean
new\ java.awt.Rectangle(1,2,3,4)	= java.awt.Rectangle[x=1,y=2,width=3,height=4]: java.awt.Rectangle
new\ Rectangle(new\ Point(1,2),new\ Dimension(3,4))	= java.awt.Rectangle[x=1,y=2,width=3,height=4]: java.awt.Rectangle
#new\ SReflect()	= :e java.lang.RuntimeException
#new\ SReflect(1)	= :e java.lang.RuntimeException
new\ Color(0,255,0)	= java.awt.Color[r=0,g=255,b=0]: java.awt.Color
1+2+\ new\ Integer(3)	= 6: java.lang.Integer
new\ Boolean(123)	= :p jadex.parser.ParserException
new\ Boolean(new\ Integer(123))	= :p jadex.parser.ParserException
new\ Boolean("test")||new\ Integer("test")	= :p jadex.parser.ParserException
new\ Integer("test")	= :e java.lang.NumberFormatException
new\ Long(1)	= 1: java.lang.Long
new\ Tuple[]\ \
{\ \
\tnew\ Tuple("coffee",\ "Kaffee"),\ \
\tnew\ Tuple("milk",\ "Milch"),\ \
\tnew\ Tuple("cow",\ "Kuh"),\ \
\tnew\ Tuple("cat",\ "Katze"),\ \
\tnew\ Tuple("dog",\ "Hund")\ \
}	= [Ljadex.commons.Tuple;@: [Ljadex.commons.Tuple;
#new\ jadex.runtime.impl.RGoal.HistoryEntry(null,null)	= HistoryEntry(destination=null, processgoal=null): jadex.runtime.impl.RGoal$HistoryEntry

#---------- cast expressions ----------
(boolean)true	= true:c boolean
(Boolean)true	= true:c java.lang.Boolean
(Component)new\ Label("Test")	= java.awt.Label: java.awt.Component
(Boolean)"true"	= :p java.lang.ClassCastException
(javax.swing.JComponent)new\ Label("Test")	= :e java.lang.ClassCastException
(JComponent)new\ Label("Test")	= :p jadex.parser.ParserException
new\ Color(0.,1.,0.)	= :p jadex.parser.ParserException
new\ Color((float)0.,(float)1.,(float)0.)	= java.awt.Color[r=0,g=255,b=0]: java.awt.Color
new\ Color((Float)0.,(Float)1.,(Float)0.)	= java.awt.Color[r=0,g=255,b=0]: java.awt.Color
new\ Color((float)0,(float)1,(float)0)	= java.awt.Color[r=0,g=255,b=0]: java.awt.Color
new\ Color((Float)0,(Float)1,(Float)0)	= java.awt.Color[r=0,g=255,b=0]: java.awt.Color

#-------- test field access --------
new\ Rectangle(1,2,3,4).x	= 1: java.lang.Integer
#SReflect.a	= a is great and beautiful:c java.lang.String
#SReflect.i	= 42:c java.lang.Integer
#SReflect.ALL	= 42:c java.lang.Integer
SReflect.class	= class jadex.commons.SReflect:c java.lang.Class
int.class	= int:c java.lang.Class
java.util.logging.Level.ALL	= ALL:c java.util.logging.Level
java.util.logging.Level.parse("12345").FINE	= FINE:c java.util.logging.Level
java.util.logging.Level.parse("12345").ALL	= ALL:c java.util.logging.Level
new\ Object[5].length = 5: int

#-------- test bean access --------
new\ Rectangle(1,2,3,4).getBounds()	= java.awt.Rectangle[x=1,y=2,width=3,height=4]: java.awt.Rectangle


#-------- test method invocations --------
new\ Boolean("true").setXYZ(1,2,3)	= :p jadex.parser.ParserException
Integer.parseInt("42")	= 42: java.lang.Integer
Integer.parseInt	= :p jadex.parser.ParserException
# This test is platform/configuration dependent, output string is not 09.09.1999 on Gentoo x64/English:
#DateFormat.getDateInstance().format(new\ Date("09/09/1999"))	= 09.09.1999: java.lang.String
"hallo".length()	= 5: java.lang.Integer
#SReflect.a.length()	= 24: java.lang.Integer
#SReflect.a.class	= class java.lang.String: java.lang.Class

#-------- test inner classes --------
#jade.domain.FIPANames.InteractionProtocol.class	= interface jade.domain.FIPANames$InteractionProtocol:c java.lang.Class
#jade.domain.FIPANames.InteractionProtocol.FIPA_REQUEST	= fipa-request:c java.lang.String
#FIPANames.InteractionProtocol.FIPA_REQUEST	= fipa-request:c java.lang.String

#-------- test collection creation --------
new\ int[]{1,2,3,4}	= [I@: [I
new\ int[4][2]	= [[I@: [[I
new\ int[4][2][]	= [[[I@: [[[I
new\ int[4]\=\=new\ short[2]	= false: java.lang.Boolean
new\ boolean[Integer.parseInt("42")]	= [Z@: [Z
new\ String[]\ {DateFormat.getDateInstance().format(new\ Date("09/09/1999"))} \
	= [Ljava.lang.String;@: [Ljava.lang.String;
new\ Hashtable(){"name"\="value",\ true\=false,\ false\=42.42} \
	= {true=false, name=value, false=42.42}: java.util.Hashtable
new\ TreeSet\ (){132,\ 17,\ Integer.parseInt("42"),\ 28,\ 3} \
	= [3, 17, 28, 42, 132]: java.util.TreeSet
new\ SortedList\ (){132,\ 17,\ Integer.parseInt("42"),\ 28,\ 3} \
	= [3, 17, 28, 42, 132]: jadex.util.collection.SortedList
new\ SortedList\ (false){132,\ 17,\ Integer.parseInt("42"),\ 28,\ 3} \
	= [132, 42, 28, 17, 3]: jadex.util.collection.SortedList
new\ Hashtable(){"milk"\="Milch",\ "cow"\="Kuh",\ "cat"\="Katze",\ "dog"\="Hund"}	\
	= {cat=Katze, cow=Kuh, dog=Hund, milk=Milch}: java.util.Hashtable
new\ Vector(20){1,\ 2,\ 3}	= [1, 2, 3]: java.util.Vector

#-------- test array access --------
new\ TreeSet\ (){132,\ 17,\ Integer.parseInt("42"),\ 28,\ 3}.toArray()[3] \
	= 42: java.lang.Object
new\ TreeSet\ (){132,\ 17,\ Integer.parseInt("42"),\ 28,\ 3}.toArray()[5] \
	= :e java.lang.ArrayIndexOutOfBoundsException

#-------- test parameter access --------
""+$param	= parameter: java.lang.String
Integer.parseInt($val)	= 42: java.lang.Integer
$rect.x	= 1: java.lang.Integer
$undefined	= :e java.lang.RuntimeException

#-------- test context access --------
#@size()		= 2: java.lang.Integer
#@getClass()		= class java.util.Hashtable: java.lang.Class
#@property1	= value1: java.lang.String
#@property2	= value2: java.lang.String
# @class		= class java.util.Hashtable: java.lang.Class # hack??? context not supported?
#@property3	= null: null

#-------- test select statements --------

# all / where
# select\ all\ $x\ as\ new\ String[0]\ from\ $x\ in\ $beliefset\ where\ $x!\="fact2"	= [fact1, fact3]: java.util.ArrayList
select\ all\ $x\ from\ $x\ in\ $beliefset\ where\ $x!\="fact2"	= [fact1, fact3]: java.util.ArrayList
select\ $x\ from\ $x\ in\ $beliefset\ where\ $x!\="fact2"	= [fact1, fact3]: java.util.ArrayList
select\ $x\ from\ $x\ in\ $beliefset\ where\ $x\=\="fact4"	= []: java.util.ArrayList
select\ $x\ from\ $x\ in\ $beliefset	= [fact1, fact3, fact2]: java.util.ArrayList

select\ all\ $x\ from\ $beliefset\ where\ $x!\="fact2"	= [fact1, fact3]: java.util.ArrayList
select\ $x\ from\ $beliefset\ where\ $x!\="fact2"	= [fact1, fact3]: java.util.ArrayList
select\ $x\ from\ $beliefset\ where\ $x\=\="fact4"	= []: java.util.ArrayList
select\ $x\ from\ $beliefset	= [fact1, fact3, fact2]: java.util.ArrayList

# any / iota
SELECT\ IOTA\ $wordpair.getEntities()[1]\ FROM\ $wordpair\ in\ $eng_ger_wordtable\ WHERE\ $wordpair.getEntities()[0]\=\=$eword	= Hund: java.lang.String
select\ any\ $x\ from\ $x\ in\ $beliefset\ where\ $x!\="fact2"	= fact1: java.lang.String
select\ iota\ $x\ from\ $x\ in\ $beliefset\ where\ $x!\="fact2"	= :e java.lang.RuntimeException
select\ iota\ $x\ from\ $x\ in\ $beliefset\ where\ $x\=\="fact2"	= fact2: java.lang.String
select\ iota\ $x\ from\ $x\ in\ $beliefset\ where\ $x\=\="fact4"	= null: null
select\ any\ $x\ from\ $x\ in\ $beliefset\ where\ $x\=\="fact4"	= null: null

select\ any\ $x\ from\ $beliefset\ where\ $x!\="fact2"	= fact1: java.lang.String
select\ iota\ $x\ from\ $beliefset\ where\ $x!\="fact2"	= :e java.lang.RuntimeException
select\ iota\ $x\ from\ $beliefset\ where\ $x\=\="fact2"	= fact2: java.lang.String
select\ iota\ $x\ from\ $beliefset\ where\ $x\=\="fact4"	= null: null
select\ any\ $x\ from\ $beliefset\ where\ $x\=\="fact4"	= null: null

# order by
select\ $x\ from\ $x\ in\ $beliefset\ order\ by\ $x	= [fact1, fact2, fact3]: java.util.LinkedList
select\ $x\ from\ $x\ in\ $beliefset\ order\ by\ $x\ desc	= [fact3, fact2, fact1]: java.util.LinkedList
select\ $x\ from\ $x\ in\ $beliefset\ order\ by\ 1	= [fact1, fact3, fact2]: java.util.LinkedList
select\ $x\ from\ $x\ in\ $beliefset\ order\ by\ 1\ desc	= [fact2, fact3, fact1]: java.util.LinkedList
select\ any\ $x\ from\ $x\ in\ $beliefset\ order\ by\ $x	= fact1: java.lang.String

select\ $x\ from\ $beliefset\ order\ by\ $x	= [fact1, fact2, fact3]: java.util.LinkedList
select\ $x\ from\ $beliefset\ order\ by\ $x\ desc	= [fact3, fact2, fact1]: java.util.LinkedList
select\ $x\ from\ $beliefset\ order\ by\ 1	= [fact1, fact3, fact2]: java.util.LinkedList
select\ $x\ from\ $beliefset\ order\ by\ 1\ desc	= [fact2, fact3, fact1]: java.util.LinkedList
select\ any\ $x\ from\ $beliefset\ order\ by\ $x	= fact1: java.lang.String

# parsing bug?
#false||select\ $x\ from\ $x\ in\ $beliefset	= ?:?

# warning, when no variable references ?
#select\ $y\ from\ $x\ in\ $beliefset	= [null, null, null]: java.util.ArrayList

# joins
select\ $x+$y\ from\ $x\ in\ $beliefset,\ $y\ in\ $beliefset\
	= [fact1fact1, fact3fact1, fact2fact1, fact1fact3, fact3fact3, fact2fact3, fact1fact2, fact3fact2, fact2fact2]: java.util.ArrayList
SUtil.arrayToString(new\ Object[]{select\ $x\ from\ $x\ in\ $beliefset,\ $y\ in\ $beliefset})\
	= [[fact1, fact3, fact2, fact1, fact3, fact2, fact1, fact3, fact2]]: java.lang.String 
SUtil.arrayToString(new\ Object[]{select\ $x\ from\ $x\ in\ $beliefset,\ $beliefset})\
	= [[fact1, fact3, fact2], [fact1, fact3, fact2]]: java.lang.String
select\ $x+$y+$z\ from\ $x\ in\ new\ String[]{"a","b","c"},\ $y\ in\ new\ String[]{"i","ii"},\ $z\ in\ new\ String[]{"1","2","3"}\
	= [ai1, bi1, ci1, aii1, bii1, cii1, ai2, bi2, ci2, aii2, bii2, cii2, ai3, bi3, ci3, aii3, bii3, cii3]: java.util.ArrayList

#-------- test change event --------
#new\ ChangeEvent("test",(Map)new\ Hashtable(){"slot"\="value","multislot"\=new\ Vector(){1,2,3,4,5}}).toSLString()\
#	= (Map :slot "value" :type "test" :multislot  (sequence "1" "2" "3" "4" "5")): java.lang.String
#SUtil.fromSLString(new\ ChangeEvent("test",(Map)new\ Hashtable(){"slot"\="value","multislot"\=new\ Vector(){1,2,3,4,5}}).toSLString())\
#	= {slot=value, type=test, multislot=[1, 2, 3, 4, 5]}: java.lang.Object

#-------- test exception text --------
($prop.name\=\="dealerResultHistory")&&($prop.type\=\=jadex.runtime.impl.RBelief.BSFACT_ADDED)	= :p jadex.parser.ParserException

#--------
#depp[0].method1().method2(1,2,3)	= false
#belief	= fact
#beliefset	= [fact1, fact2, fact3]
#beliefset[2]	= fact2
#t[1].entities[1]	= A

#-------- testcases for other methods --------
SUtil.wrapText("abcdef",3)	= abc\ndef: java.lang.String
SUtil.wrapText("ab\\ncdef",3)	= ab\ncde\nf: java.lang.String
SUtil.replace("","test","me")	= : java.lang.String
SUtil.replace("testest","test","me")	= meest: java.lang.String
SUtil.replace("abcdefg","b","q")	= aqcdefg: java.lang.String
System.out.println("grmpflmpf")	= null: void
IFilter.ALWAYS.filter(null)	= true: boolean
IFilter.NEVER.filter(null)	= false: boolean
$filter.filter(null)	= true: boolean
new\ ConstantFilter(true)	= :p jadex.parser.ParserException

#-------- testcases for generics --------
new\ java.util.ArrayList<String>()	= []: java.util.ArrayList
new\ java.util.HashMap<String,\ java.util.List<String>>()	= {}: java.util.HashMap
new\ java.util.HashMap<String,\ java.util.List<Tuple2<String,\ String>>>()	= {}: java.util.HashMap
new\ java.util.HashMap<String,\ java.util.List<java.util.Set<Tuple2<String,\ String>>>>()	= {}: java.util.HashMap
new\ java.util.HashMap<>()	= {}: java.util.HashMap
(java.util.Map<String,\ java.util.List<String>>)null	= null: java.util.HashMap
new\ Tuple2<Tuple2<String,\ String>,\ Tuple2<String,\ String>>(new\ Tuple2<String,\ String>("a",\ "b"),\ new\ Tuple2<String,\ String>("c",\ "d"))	= Tuple[Tuple[a, b], Tuple[c, d]]: jadex.commons.Tuple2
String[].class	= class [Ljava.lang.String;: java.lang.Class
