plugins 
{
    id 'java-library'
	id 'idea'
    id 'ca.coglinc.javacc' version "2.4.0"
}

description = 'Java parser can evaluate Java expressions'
	
group = 'org.activecomponents.jadex'

if(System.getProperty("PUBLISH_SCRIPT_PATH"))
	apply from: System.getProperty("PUBLISH_SCRIPT_PATH")

java
{
	sourceCompatibility = '1.17'
}

repositories
{
    mavenCentral()
}

dependencies
{
	def v = System.getProperty('JADEX_VERSION')?:'+'
	implementation 'org.activecomponents.jadex:common:'+v
	implementation 'org.activecomponents.jadex:collection:'+v
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
	// required for gradle 9!? https://docs.gradle.org/8.7/userguide/upgrading_version_8.html#test_framework_implementation_dependencies
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test 
{
  useJUnitPlatform()
}

def taskName = "sourcesJar"

if (tasks.findByName(taskName)) {
    def task = tasks.getByName(taskName)
    if (tasks.findByName("compileJavacc") && tasks.findByName("compileJjtree"))
        task.dependsOn "compileJavacc", "compileJjtree"
} else {
    println "Task $taskName does not exist"
}

/*def javacctasks = ['compileJavacc', 'compileJjtree']
tasks.whenTaskAdded{ task ->
	if( javacctasks.contains(task.name)
		&& !project.gradle.startParameter.taskNames.any {taskname ->
			return javacctasks.any {taskname.contains(it) } }) {
	
		task.enabled = false
		println "Disabled $task"
	}
}*/

// Generate into 'src' folder instead of 'build' to be checked into repo
def javaccOutputDirectory	= file('src/generated/javacc')
def jjtreeOutputDirectory	= file('src/generated/jjtree')

// JavaCC plugin and settings
/*buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath group: 'ca.coglinc', name: 'javacc-gradle-plugin', version: '2.4.0'
		classpath group: 'net.java.dev.javacc', name: 'javacc', version: '3.2'
	}
}*/
compileJavacc.outputDirectory	= javaccOutputDirectory
compileJjtree.outputDirectory	= jjtreeOutputDirectory

// Use parser generator ouput dirs as src dirs for java compilation (e.g. eclipse import)
sourceSets {
	main {
		java {
			srcDir javaccOutputDirectory
			srcDir jjtreeOutputDirectory
		}
	}
}

processResources 
{
    from ('src/main/java') 
    {
        include '**/.system'
    }
}
