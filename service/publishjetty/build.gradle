plugins 
{
    id 'java-library'
    
}

description = 'Publish service feature for Jetty'

group = 'org.activecomponents.jadex'

if(System.getProperty("PUBLISH_SCRIPT_PATH"))
	apply from: System.getProperty("PUBLISH_SCRIPT_PATH")

java
{
	sourceCompatibility = '1.17'
}

repositories
{
	mavenCentral()
}

dependencies
{
	def v = System.getProperty('JADEX_VERSION')?:'+'
	implementation 'org.activecomponents.jadex:common:'+v
	implementation 'org.activecomponents.jadex:collection:'+v
	implementation 'org.activecomponents.jadex:traverser:'+v
	implementation 'org.activecomponents.jadex:javaparser:'+v
	implementation 'org.activecomponents.jadex:core:'+v
	implementation 'org.activecomponents.jadex:execution:'+v
	implementation 'org.activecomponents.jadex:micro:'+v
	implementation 'org.activecomponents.jadex:model:'+v
    implementation 'org.activecomponents.jadex:requiredservice:'+v
    implementation 'org.activecomponents.jadex:publishservice:'+v
    implementation 'org.activecomponents.jadex:providedservice:'+v
	implementation 'org.activecomponents.jadex:serialization:'+v
	
	api 'org.eclipse.jetty:jetty-server:11.0.6'
	api 'org.eclipse.jetty.websocket:websocket-jetty-server:11.0.6'
	
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.3'
}

task copyDependencies {
    doLast {
        copy {
            configurations.compileClasspath.each { File file ->
                  if (!file.absolutePath.startsWith(project.rootDir.absolutePath)) {
                    if (file.name.endsWith('.jar'))
                        from file.getParent()
                }
            } 
            into 'build/libs/external-dependencies'
        }
    }
    outputs.upToDateWhen { false }
}
build.dependsOn(copyDependencies)

processResources 
{
    from ('src/main/java') 
    {
        include '**/.system'
    }
}