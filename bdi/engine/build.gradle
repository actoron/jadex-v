plugins 
{
	id 'java-library'
}

description = 'BDI execution engine'

group = 'org.activecomponents.jadex'

if(System.getProperty("PUBLISH_SCRIPT_PATH"))
	apply from: System.getProperty("PUBLISH_SCRIPT_PATH")

java
{
	sourceCompatibility = '1.17'
}

repositories
{
	mavenCentral()
}

dependencies
{
	def v = System.getProperty('JADEX_VERSION')?:'+'
	implementation 'org.activecomponents.jadex:core:'+v
	implementation 'org.activecomponents.jadex:execution:'+v
	implementation 'org.activecomponents.jadex:injection:'+v
	implementation 'org.activecomponents.jadex:common:'+v
	implementation 'org.activecomponents.jadex:future:'+v
	implementation 'org.activecomponents.jadex:javaparser:'+v
	implementation 'org.activecomponents.jadex:collection:'+v
	implementation 'org.activecomponents.jadex:classreader:'+v
	implementation 'org.activecomponents.jadex:bytecode:'+v
	implementation 'org.activecomponents.jadex:eca:'+v
	
	implementation 'org.ow2.asm:asm:9.1'
	implementation 'org.ow2.asm:asm-tree:9.1'
	implementation 'org.ow2.asm:asm-util:9.1'
	
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'

	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
	// required for gradle 9!? https://docs.gradle.org/8.7/userguide/upgrading_version_8.html#test_framework_implementation_dependencies
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test 
{
	useJUnitPlatform()
}

task copyDependencies {
    doLast {
        copy {
            configurations.compileClasspath.each { File file ->
                  if (!file.absolutePath.startsWith(project.rootDir.absolutePath)) {
                    if (file.name.endsWith('.jar'))
                        from file.getParent()
                }
            } 
            into 'build/libs/external-dependencies'
        }
    }
    outputs.upToDateWhen { false }
}
build.dependsOn(copyDependencies)

processResources 
{
    from ('src/main/java') 
    {
        include '**/.system'
    }
}